/// <reference types="node" />
import YouTube, { YTComment, Channel, Playlist, Subscription, Video, VideoAbuseReportReason } from '.';
/**
 * All methods requiring an OAuth access token.
 * Use `YouTube#oauth` to access these methods.
 */
export declare class OAuth {
    youtube: YouTube;
    /**
     *
     * @param youtube The YouTube object to retrieve the token from.
     */
    constructor(youtube: YouTube);
    /**
     * @ignore
     */
    private checkTokenAndThrow;
    /**
     * Gets the authorized user's [[Channel]].
     * Last tested 03/06/2020 22:21. PASSING
     */
    getMe(): Promise<Channel>;
    /**
     * Gets the authorized user's [[Subscription]]s.
     * Last tested 03/06/2020 23:20. PASSING
     * @param maxResults The maximum number of subscriptions to fetch.
     * Fetches 10 by default. Set to a value <=0 to fetch all.
     */
    getMySubscriptions(maxResults?: number): Promise<Subscription[]>;
    /**
     * Gets the authorized user's [[Playlist]]s.
     * Last tested 03/06/2020 23:23. PASSING
     * @param maxResults The maximum number of playlists to fetch.
     * Fetches 10 by default. Set to a value <=0 to fetch all.
     */
    getMyPlaylists(maxResults?: number): Promise<Playlist[]>;
    /**
     * Post a [[Comment]] on a [[Video]] or [[Channel]] discussion.
     * Last tested 03/04/2020 23:20. PASSING
     * @param text The text content of the comment.
     * @param channelId The channel to post the comment on.
     * @param videoId The video of the channel to post the comment on.
     * If falsey, the comment will be posted to the channel discussion.
     */
    postComment(text: string, channelId: string, videoId?: string): Promise<YTComment>;
    /**
     * Edit a [[Comment]] on a [[Video]] or [[Channel]] discussion.
     * Last tested 03/04/2020 23:20. PASSING
     * @param text The new text content of the comment.
     * @param commentId The ID of the comment.
     */
    editComment(text: string, commentId: string): Promise<YTComment>;
    /**
     * Subscribe to a [[Channel]].
     * Last tested 03/04/2020 23:17. PASSING
     * @param channelId The channel to subscribe to.
     * @returns A partial subscription object.
     */
    subscribeToChannel(channelId: string): Promise<Subscription>;
    /**
     * Unsubscribe from a [[Channel]].
     * Last tested 03/04/2020 23:17. PASSING
     * @param channelId The channel to unsubscribe from.
     */
    unsubscribeFromChannel(subscriptionId: string): Promise<void>;
    /**
     * Like, dislike, or remove a rating from a [[Video]].
     * Last tested 03/07/2020 02:15. PASSING
     * @param videoId The video to rate.
     * @param rating The rating to give the video.
     */
    rateVideo(videoId: string, rating: 'like' | 'dislike' | 'none'): Promise<void>;
    /**
     * Retrieve your rating on a [[Video]].
     * Last tested 03/07/2020 02:35. PASSING
     * @param videoId The video to retrieve your rating from.
     */
    getMyRatings(videoIds: string[]): Promise<{
        videoId: string;
        rating: 'like' | 'dislike' | 'none' | 'unspecified';
    }[]>;
    /**
     * Report a [[Video]] for abuse.
     * Last tested NEVER
     * @param videoId The video to report.
     * @param reasonId The reason for reporting. (IDs can be found [here](https://developers.google.com/youtube/v3/docs/videoAbuseReportReasons/list))
     * @param secondaryReasonId An optional second reason for reporting.
     * @param comments Any additional information.
     * @param language The language that the reporter speaks.
     */
    reportAbuse(videoId: string, reasonId: string, secondaryReasonId?: string, comments?: string, language?: string): Promise<void>;
    /**
     * Deletes a [[Video]].
     * Last tested NEVER
     * @param videoId The video to delete.
     */
    deleteVideo(videoId: string): Promise<void>;
    /**
     * Updates a [[Video]].
     * **If your request does not specify a value for a property that already has a value,
     * the property's existing value will be deleted.**
     * Last tested NEVER
     * @param video The updated video object.
     */
    updateVideo(video: VideoUpdateResource): Promise<Video>;
    /**
     * Sets a new [[Thumbnail]] for a [[Video]].
     * Last tested 03/07/2020 11:25. PASSING
     * @param videoId The video to set the thumbnail for.
     * @param image The image data and type to upload.
     */
    setThumbnail(videoId: string, image: {
        type: 'jpeg' | 'png';
        data: Buffer;
    }): Promise<typeof Video.prototype.thumbnails>;
    /**
     * Creates a [[Playlist]].
     * Last tested 03/19/2020 03:06. PASSING
     * @param title A title for the playlist.
     * @param description A description of the playlist.
     * @param privacy Whether the video is private, public, or unlisted.
     * @param tags Tags pertaining to the playlist.
     * @param language The language of the playlist's default title and description.
     * @param localizations Translated titles and descriptions.
     */
    createPlaylist(title: string, description?: string, privacy?: 'private' | 'public' | 'unlisted', tags?: string[], language?: string, localizations?: {
        [language: string]: {
            title: string;
            description: string;
        };
    }): Promise<Playlist>;
    /**
     * Updates a [[Playlist]].
     * **If your request does not specify a value for a property that already has a value,
     * the property's existing value will be deleted.**
     * Last tested 03/19/2020 03:13. PASSING
     * @param id The ID of the playlist to update.
     * @param title A title for the playlist.
     * @param description A description of the playlist.
     * @param privacy Whether the video is private, public, or unlisted.
     * @param tags Tags pertaining to the playlist.
     * @param language The language of the playlist's default title and description.
     * @param localizations Translated titles and descriptions.
     */
    updatePlaylist(id: string, title: string, description?: string, privacy?: 'private' | 'public' | 'unlisted', tags?: string[], language?: string, localizations?: {
        [language: string]: {
            title: string;
            description: string;
        };
    }): Promise<Playlist>;
    /**
     * Deletes a [[Playlist]].
     * Last tested 03/19/2020 03:18. PASSING
     * @param id The ID of the playlist to delete.
     */
    deletePlaylist(id: string): Promise<void>;
    /**
     * Get a list of video abuse report reasons.
     * Last tested 03/14/2020 10:47. PASSING
     */
    getVideoAbuseReportReasons(): Promise<VideoAbuseReportReason[]>;
}
